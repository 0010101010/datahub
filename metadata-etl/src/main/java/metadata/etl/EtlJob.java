/**
 * Copyright 2015 LinkedIn Corp. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */
package metadata.etl;

import org.python.core.PyDictionary;
import org.python.core.PyString;
import org.python.core.PySystemState;
import org.python.util.PythonInterpreter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import wherehows.common.Constant;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Properties;


/**
 * This is the interface of all ETL job.
 * It can run as a standalone jar.
 * Also can trigger by executor service.
 * Created by zsun on 7/29/15.
 */
public abstract class EtlJob {
  public final static String CONFIG_FILE = "application.properties";
  public PythonInterpreter interpreter;
  public PySystemState sys;
  public Properties prop;
  public ClassLoader classLoader = getClass().getClassLoader();
  protected final Logger logger = LoggerFactory.getLogger(getClass());

  /**
   * Constructor for using config file
   * @param appId
   * @param whExecId generated by backend service
   */
  @Deprecated
  public EtlJob(Integer appId, Integer dbId, long whExecId) {
    this(appId, dbId, whExecId, CONFIG_FILE);
  }

  /**
   * Private constructor for using config file
   * @param appId
   * @param dbId
   * @param whExecId
   * @param configFile
   */
  @Deprecated
  public EtlJob(Integer appId, Integer dbId, long whExecId, String configFile) {
    configFromFile(appId, dbId, whExecId, configFile);
    addJythonToPath();
    interpreter = new PythonInterpreter(null, sys);
  }

  /**
   * Used by backend service
   * @param appId nullable
   * @param dbId nullable
   * @param whExecId
   * @param properties
   */
  public EtlJob(Integer appId, Integer dbId, Long whExecId, Properties properties) {
    configFromProperties(appId, dbId, whExecId, properties);
    addJythonToPath();
    interpreter = new PythonInterpreter(null, sys);
  }

  private void addJythonToPath() {
    URL url = classLoader.getResource("jython");
    if (url != null) {
      File file = new File(url.getFile());
      String path = file.getPath();
      if (path.startsWith("file:")) {
        path = path.substring(5);
      }
      sys.path.append(new PyString(path.replace("!", "")));
    }
  }

  @Deprecated
  private void configFromFile(Integer appId, Integer dbId, long whExecId, String configFile) {

    prop = new Properties();
    if (appId != null) {
      prop.setProperty(Constant.APP_ID_KEY, String.valueOf(appId));
    }
    if (dbId != null) {
      prop.setProperty(Constant.DB_ID_KEY, String.valueOf(dbId));
    }
    prop.setProperty(Constant.WH_EXEC_ID_KEY, String.valueOf(whExecId));

    try (InputStream propFile = classLoader.getResourceAsStream(configFile)) {
      prop.load(propFile);
    } catch (IOException e) {
      logger.error("property file '{}' not found in the classpath" , configFile);
      e.printStackTrace();
    }

    PyDictionary config = new PyDictionary();

    for (String key : prop.stringPropertyNames()) {
      String value = prop.getProperty(key);
      config.put(new PyString(key), new PyString(value));
    }

    sys = new PySystemState();
    sys.argv.append(config);
  }

  /**
   * Copy all properties into jython envirenment
   * @param appId
   * @param whExecId
   * @param properties
   */
  private void configFromProperties(Integer appId, Integer dbId, Long whExecId, Properties properties) {
    this.prop = properties;
    if (appId != null)
      prop.setProperty(Constant.APP_ID_KEY, String.valueOf(appId));
    if (dbId != null)
      prop.setProperty(Constant.DB_ID_KEY, String.valueOf(dbId));
    prop.setProperty(Constant.WH_EXEC_ID_KEY, String.valueOf(whExecId));
    PyDictionary config = new PyDictionary();
    for (String key : prop.stringPropertyNames()) {
      String value = prop.getProperty(key);
      config.put(new PyString(key), new PyString(value));
    }
    sys = new PySystemState();
    sys.argv.append(config);
  }
  /**
   * Extract data from source
   * @return success
   */

  public abstract void extract()
    throws Exception;

  public abstract void transform()
    throws Exception;

  public abstract void load()
    throws Exception;

  public void setup()
    throws Exception {

  }

  public void close()
    throws Exception {

  }

  public void run()
    throws Exception {
    setup();
    extract();
    transform();
    load();
    close();
  }
}
